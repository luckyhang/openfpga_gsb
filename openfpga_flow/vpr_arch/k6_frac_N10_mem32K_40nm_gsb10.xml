<!-- 
  Flagship Heterogeneous Architecture (No Carry Chains) for VTR 7.0.

  - 40 nm technology
  - General purpose logic block: 
    K = 6, N = 10, fracturable 6 LUTs (can operate as one 6-LUT or two 5-LUTs with all 5 inputs shared) 
    with optionally registered outputs
  - Memory size 32 Kbits, memory aspect ratios vary from a data width of 1 to data width of 64.  
    Height = 6, found on every (8n+2)th column
  - Multiplier modes: one 36x36, two 18x18, each 18x18 can also operate as two 9x9.  
    Height = 4, found on every (8n+6)th column
  - Routing architecture: L = 4, fc_in = 0.15, Fc_out = 0.1

  Details on Modelling:

  The electrical design of the architecture described here is NOT from an 
  optimized, SPICED architecture.  Instead, we attempt to create a reasonable 
  architecture file by using an existing commercial FPGA to approximate the area, 
  delay, and power of the underlying components. This is combined with a reasonable 40 nm 
  model of wiring and circuit design for low-level routing components, where available.
  The resulting architecture has delays that roughly match a commercial 40 nm FPGA, but also 
  has wiring electrical parameters that allow the wire lengths and switch patterns to be 
  modified and you will still get reasonable delay results for the new architecture.
  The following describes, in detail, how we obtained the various electrical values for this 
  architecture.

  Rmin for nmos and pmos, routing buffer sizes, and I/O pad delays are from the ifar 
  architecture created by Ian Kuon: K06 N10 45nm fc 0.15 area-delay optimized architecture. 
  (n10k06l04.fc15.area1delay1.cmos45nm.bptm.cmos45nm.xml)      
  This routing architecture was optimized for 45 nm, and we have scaled it linearly to 40 nm to 
  match the overall target (a 40 nm FPGA).

  We obtain delay numbers by measuring delays of routing, soft logic blocks, 
  memories, and multipliers from test circuits on a Stratix IV GX device 
  (EP4SGX230DF29C2X, i.e. fastest speed grade). For routing, we took the average delay of H4 and V4 
  wires.  Rmetal and Cmetal values for the routing wires were obtained from work done by Charles 
  Chiasson. We use a 96 nm half-pitch (corresponding to mid-level metal stack 40 nm routing) and 
  take the R and C data from the ITRS roadmap.  

 For the general purpose logic block, we assume that the area and delays of the Stratix IV 
  crossbar is close enough to the crossbar modelled here.  We use 40 inputs and 20 feedback lines in 
  the cluster and a full crossbar, leading to 60:1 multiplexers in front of each BLE input.
  Stratix IV uses 52 inputs and 20 feedback lines, but only a half-populated crossbar, leading to 
  36:1 multiplexers.  We require 60 such multiplexers, while Stratix IV requires 88 for its more
  complex fracturable BLEs + the extra control signals. We justify this rough approximation as follows: 
  The Stratix IV crossbar has more inputs (72 vs. 60) and 
  outputs (88 vs. 60) than our full crossbar which should increase its area and delay, but the 
  Stratix IV crossbar is also 50% sparse (each mux is 36:1 instead of 60:1) which should reduce its 
  area and delay.  The total number of crossbar switch points is roughly similar between the two 
  architectures (3160 for SIV and 3600 for the academic architecture below), so we use the area 
  & delay of the Stratix IV crossbar as a rough approximation of our crossbar.

  For LUTs, we include LUT 
  delays measured from Stratix IV which is dependant on the input used (ie. some 
  LUT inputs are faster than others).  The CAD tools at the time of VTR 7 does 
  not consider differences in LUT input delays.

  Logic block area numbers obtained by scaling overall tile area of a 65nm 
  Stratix III device, (as given in Wong, Betz and Rose, FPGA 2011) to 40 nm, then subtracting out 
  routing area at a channel width of 300. We use a channel width of 300 because it can route 
  all the VTR 6.0 benchmark circuits with an approximately 20% safety margin, and is also close to the
  total channel width of Stratix IV. Hence this channel width is close to the commercial practice of
  choosing a width that provides high routability. The architecture can be routed at different channel
  widths, but we estimate the tile size and hence the physical length of routing wires assuming
  a channel width of 300.

  Sanity checks employed:
    1.  We confirmed the routing buffer delay is ~1/3rd of total routing delay at L = 4. This matches 
        common electrical design.


  Authors: Jason Luu, Jeff Goeders, Vaughn Betz
--><architecture>

  <!-- 
       ODIN II specific config begins 
       Describes the types of user-specified netlist blocks (in blif, this corresponds to 
       ".model [type_of_block]") that this architecture supports.

       Note: Basic LUTs, I/Os, and flip-flops are not included here as there are 
       already special structures in blif (.names, .input, .output, and .latch) 
       that describe them.
  -->
  <models>

    <model name="io">
      <input_ports>
        <port name="outpad"/>
      </input_ports>
      <output_ports>
        <port name="inpad"/>
      </output_ports>
    </model>

    <model name="multiply">
      <input_ports>
        <port name="a" combinational_sink_ports="out"/>
        <port name="b" combinational_sink_ports="out"/>
      </input_ports>
      <output_ports>
        <port name="out"/>
      </output_ports>
    </model>

    <model name="single_port_ram">
      <input_ports>
        <port name="we" clock="clk"/>     <!-- control -->
        <port name="addr" clock="clk"/>  <!-- address lines -->
        <port name="data" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="clk" is_clock="1"/>  <!-- memories are often clocked -->
      </input_ports>
      <output_ports>
        <port name="out" clock="clk"/>   <!-- output can be broken down into smaller bit widths minimum size 1 -->
      </output_ports>
    </model>

  </models>
  <!-- ODIN II specific config ends -->

  <!-- Physical descriptions begin -->
  <layout>
      <fixed_layout name="fixed_layout" width="40" height="40">
        <!--Perimeter of 'io' blocks with 'EMPTY' blocks at corners-->
        <perimeter type="EMPTY" priority="100"/>
        <!--Fill with 'clb'-->
        <fill type="plb" priority="10"/>
        <col type="io" startx="1" starty="0" priority="30"/>
        <col type="io" startx="W-2" starty="0" priority="30"/>
        <row type="io" starty="1" startx="0" priority="30"/>
        <row type="io" starty="H-2" startx="0" priority="30"/>
	<single type="io" x="1" y="1" priority="31"/>
	<single type="io" x="1" y="H-2" priority="31"/>
	<single type="io" x="W-2" y="1" priority="31"/>
	<single type="io" x="W-2" y="H-2" priority="31"/>

	<col type="dsp" startx="6" starty="2" repeatx="49" priority="20"/>
	<col type="dsp" startx="13" starty="2" repeatx="49" priority="20"/>
	<col type="dsp" startx="19" starty="2" repeatx="49" priority="20"/>
	<col type="dsp" startx="24" starty="2" repeatx="49" priority="20"/>
	<col type="dsp" startx="27" starty="2" repeatx="49" priority="20"/>
	<col type="dsp" startx="33" starty="2" repeatx="49" priority="20"/>
	<col type="dsp" startx="39" starty="2" repeatx="49" priority="20"/>
	<col type="dsp" startx="46" starty="2" repeatx="49" priority="20"/>
		
	<col type="memory" startx="9" starty="2" repeatx="49" priority="20"/>
	<col type="memory" startx="16" starty="2" repeatx="49" priority="20"/>
	<col type="memory" startx="36" starty="2" repeatx="49" priority="20"/>
	<col type="memory" startx="43" starty="2" repeatx="49" priority="20"/>
    </fixed_layout>

</layout>

  <device>
    <!-- VB & JL: Using Ian Kuon's transistor sizing and drive strength data for routing, at 40 nm. Ian used BPTM 
			     models. We are modifying the delay values however, to include metal C and R, which allows more architecture
			     experimentation. We are also modifying the relative resistance of PMOS to be 1.8x that of NMOS
			     (vs. Ian's 3x) as 1.8x lines up with Jeff G's data from a 45 nm process (and is more typical of 
			     45 nm in general). I'm upping the Rmin_nmos from Ian's just over 6k to nearly 9k, and dropping 
			     RminW_pmos from 18k to 16k to hit this 1.8x ratio, while keeping the delays of buffers approximately
			     lined up with Stratix IV. 
			     We are using Jeff G.'s capacitance data for 45 nm (in tech/ptm_45nm).
			     Jeff's tables list C in for transistors with widths in multiples of the minimum feature size (45 nm).
			     The minimum contactable transistor is 2.5 * 45 nm, so I need to multiply drive strength sizes in this file
	                     by 2.5x when looking up in Jeff's tables.
			     The delay values are lined up with Stratix IV, which has an architecture similar to this
			     proposed FPGA, and which is also 40 nm 
			     C_ipin_cblock: input capacitance of a track buffer, which VPR assumes is a single-stage
			     4x minimum drive strength buffer. -->
   
    <sizing R_minW_nmos="8926" R_minW_pmos="16067"/>
    <!-- The grid_logic_tile_area below will be used for all blocks that do not explicitly set their own (non-routing)
     	  area; set to 0 since we explicitly set the area of all blocks currently in this architecture file.
	  -->
		<area grid_logic_tile_area="0"/>
    <chan_width_distr>
      <x distr="uniform" peak="1.000000"/>
      <y distr="uniform" peak="1.000000"/>
    </chan_width_distr>
    <switch_block type="wilton" fs="3"/>
  <connection_block input_switch_name="ipin_cblock"/>
        </device>
  <switchlist>
	  <!-- VB: the mux_trans_size and buf_size data below is in minimum width transistor *areas*, assuming the purple
	       book area formula. This means the mux transistors are about 5x minimum drive strength.
	       We assume the first stage of the buffer is 3x min drive strength to be reasonable given the large 
	       mux transistors, and this gives a reasonable stage ratio of a bit over 5x to the second stage. We assume
	       the n and p transistors in the first stage are equal-sized to lower the buffer trip point, since it's fed
	       by a pass transistor mux. We can then reverse engineer the buffer second stage to hit the specified 
	       buf_size (really buffer area) - 16.2x minimum drive nmos and 1.8*16.2 = 29.2x minimum drive.
	       I then took the data from Jeff G.'s PTM modeling of 45 nm to get the Cin (gate of first stage) and Cout 
	       (diff of second stage) listed below.  Jeff's models are in tech/ptm_45nm, and are in min feature multiples.
	       The minimum contactable transistor is 2.5 * 45 nm, so I need to multiply the drive strength sizes above by 
	       2.5x when looking up in Jeff's tables.
	       Finally, we choose a switch delay (58 ps) that leads to length 4 wires having a delay equal to that of SIV of 126 ps.
	       This also leads to the switch being 46% of the total wire delay, which is reasonable. -->

      <!--switch ipin_cblock resistance set to yeild for 4x minimum drive strength buffer-->
      <switch type="mux" name="ipin_cblock" R="2231.5" Cout="0." Cin="1.47e-15" Tdel="7.247000e-11" mux_trans_size="1.222260" buf_size="auto"/>
      <switch type="mux" name="mux0" R="551" Cin=".77e-15" Cout="4e-15" Tdel="58e-12" mux_trans_size="2.630740" buf_size="27.645901"/>
      <switch type="mux" name="mux1" R="551" Cin=".77e-15" Cout="4e-15" Tdel="58e-12" mux_trans_size="2.630740" buf_size="27.645901"/>
      <switch type="mux" name="0" R="551" Cin=".77e-15" Cout="4e-15" Tdel="58e-12" mux_trans_size="2.630740" buf_size="27.645901"/>
    </switchlist>
  <segmentlist>
    <!--- VB & JL: using ITRS metal stack data, 96 nm half pitch wires, which are intermediate metal width/space.  
			     With the 96 nm half pitch, such wires would take 60 um of height, vs. a 90 nm high (approximated as square) Stratix IV tile so this seems
			     reasonable. Using a tile length of 90 nm, corresponding to the length of a Stratix IV tile if it were square. -->
    <!---freq指定频率，实际需固定chan_width为158-->
	<segment name="l1" freq="4.000000" length="1" type="unidir" Rmetal="101" Cmetal="22.5e-15">
      <mux name="0"/>
      <sb type="pattern">1 1</sb>
      <cb type="pattern">1</cb>
    </segment>
	<segment name="l2" freq="8.000000" length="2" type="unidir" Rmetal="101" Cmetal="22.5e-15">
      <mux name="0"/>
      <sb type="pattern">1 0 1</sb>
      <cb type="pattern">1 1</cb>
    </segment>
	<segment name="l3" freq="1.500000" length="3" type="unidir" Rmetal="101" Cmetal="22.5e-15">
      <mux name="0"/>
      <sb type="pattern">1 0 0 1</sb>
      <cb type="pattern">1 0 1</cb>
    </segment>
	<segment name="l4" freq="2.000000" length="4" type="unidir" Rmetal="101" Cmetal="22.5e-15">
      <mux name="0"/>
      <sb type="pattern">1 0 0 0 1</sb>
      <cb type="pattern">1 0 0 1</cb>
    </segment>
	<segment name="l5" freq="10.000000" length="5" type="unidir" Rmetal="101" Cmetal="22.5e-15">
      <mux name="0"/>
      <sb type="pattern">1 0 0 0 0 1</sb>
      <cb type="pattern">1 0 0 0 1</cb>
    </segment>
	<segment name="l8" freq="8.000000" length="8" type="unidir" Rmetal="101" Cmetal="22.5e-15">
      <mux name="0"/>
      <sb type="pattern">1 0 0 0 0 0 0 0 1</sb>
      <cb type="pattern">1 0 0 0 0 0 0 1</cb>
    </segment>
	<segment name="l12" freq="6.000000" length="12" type="unidir" Rmetal="101" Cmetal="22.5e-15">
      <mux name="0"/>
      <sb type="pattern">1 0 0 0 0 0 0 0 0 0 0 0 1</sb>
      <cb type="pattern">1 0 0 0 0 0 0 0 0 0 0 1</cb>
    </segment>
      <segment name="imux_medium" freq="0.000000" length="1" type="unidir" Rmetal="0" Cmetal="0">
          <mux name="ipin_cblock"/>
          <sb type="pattern">1 1</sb>
          <cb type="pattern">1</cb>
      </segment>
      <segment name="omux_medium" freq="0.000000" length="1" type="unidir" Rmetal="0" Cmetal="0">
          <mux name="mux0"/>
          <sb type="pattern">1 1</sb>
          <cb type="pattern">1</cb>
      </segment>
      <segment name="gsb_medium" freq="0.000000" length="1" type="unidir" Rmetal="0" Cmetal="0">
          <mux name="0"/>
          <sb type="pattern">1 1</sb>
          <cb type="pattern">1</cb>
      </segment>
  </segmentlist>

  <tiles>
    <!-- Do NOT add clock pins to I/O here!!! VPR does not build clock network in the way that OpenFPGA can support
         If you need to register the I/O, define clocks in the circuit models
         These clocks can be handled in back-end
     -->

    <tile name="plb" area="53894">
      <equivalent_sites>
        <site pb_type="plb"/>
      </equivalent_sites>
      <input name="Ia" num_pins="6" equivalent="full"/>
	  <input name="Ib" num_pins="6" equivalent="full"/>
	  <input name="Ic" num_pins="6" equivalent="full"/>
	  <input name="Id" num_pins="6" equivalent="full"/>
	  <input name="Ie" num_pins="6" equivalent="full"/>
	  <input name="If" num_pins="6" equivalent="full"/>
	  <input name="Ig" num_pins="6" equivalent="full"/>
	  <input name="Ih" num_pins="6" equivalent="full"/>
	  <input name="i" num_pins="8" equivalent="none"/>
	  <input name="x" num_pins="8" equivalent="none"/>
	  
    <output name="o" num_pins="8" equivalent="none"/>
	  <output name="q" num_pins="8" equivalent="none"/>
	  <output name="mux_o" num_pins="8" equivalent="none"/>
	  
	  <clock name="clk" num_pins="1"/>

      <fc in_type="frac" in_val="0.15" out_type="frac" out_val="0.10"/>
      <pinlocations pattern="spread"/>
    </tile>

    <tile name="io" capacity="6" area="0">
      <equivalent_sites>
        <site pb_type="io"/>
      </equivalent_sites>
      <input name="outpad" num_pins="1"/>
      <output name="inpad" num_pins="1"/>
      <clock name="clock" num_pins="1"/>

      <!-- Every input pin is driven by 15% of the tracks in a channel, every output pin is driven by 10% of the tracks in a channel -->
      <fc in_type="frac" in_val="0.5" out_type="frac" out_val="0.5"/>

      <!-- IOs go on the periphery of the FPGA, for consistency, 
          make it physically equivalent on all sides so that only one definition of I/Os is needed.
          If I do not make a physically equivalent definition, then I need to define 4 different I/Os, one for each side of the FPGA
        -->
      <pinlocations pattern="custom">
        <loc side="left">io.outpad io.inpad io.clock</loc>
        <loc side="top">io.outpad io.inpad io.clock</loc>
        <loc side="right">io.outpad io.inpad io.clock</loc>
        <loc side="bottom">io.outpad io.inpad io.clock</loc>
      </pinlocations>
      <!-- Place I/Os on the sides of the FPGA -->
      <power method="ignore"/>			
    </tile>

    

    <tile name="dsp" height="3" area="396000">
      <equivalent_sites>
        <site pb_type="dsp"/>
      </equivalent_sites>
      <input name="a" num_pins="93"/>
      <input name="b" num_pins="93"/>
      <output name="out" num_pins="64"/>
      <fc in_type="frac" in_val="0.15" out_type="frac" out_val="0.1"/>
      <pinlocations pattern="spread"/>

      <!-- Place this multiplier block every 8 columns from (and including) the sixth column -->
      <power method="sum-of-children"/>
    </tile>


    <tile name="memory" height="4" area="548000">
      <equivalent_sites>
        <site pb_type="memory"/>
      </equivalent_sites>
      <input name="addr1" num_pins="77"/>
      <input name="addr2" num_pins="77"/>
      <input name="data" num_pins="90"/>
      <input name="we1" num_pins="1"/>
      <input name="we2" num_pins="1"/>
      <output name="out" num_pins="90"/>
      <clock name="clk" num_pins="1"/>
      <!-- Every input pin is driven by 15% of the tracks in a channel, every output pin is driven by 10% of the tracks in a channel -->
      <fc in_type="frac" in_val="0.15" out_type="frac" out_val="0.1"/>
      <pinlocations pattern="spread"/>
      <!-- Place this memory block every 8 columns from (and including) the second column -->
      <power method="sum-of-children"/>
    </tile>

  </tiles>
  
  <complexblocklist>
	<!--pb_type name="plb" area="53894"-->
    <pb_type name="plb">
      <input name="Ia" num_pins="6" equivalent="full"/>
      <input name="Ib" num_pins="6" equivalent="full"/>
      <input name="Ic" num_pins="6" equivalent="full"/>
      <input name="Id" num_pins="6" equivalent="full"/>
      <input name="Ie" num_pins="6" equivalent="full"/>
      <input name="If" num_pins="6" equivalent="full"/>
      <input name="Ig" num_pins="6" equivalent="full"/>
      <input name="Ih" num_pins="6" equivalent="full"/>
      <input name="i" num_pins="8" equivalent="none"/>
      <input name="x" num_pins="8" equivalent="none"/>
      
      <output name="o" num_pins="8" equivalent="none"/>
      <output name="q" num_pins="8" equivalent="none"/>
      <output name="mux_o" num_pins="8" equivalent="none"/>
      
      <clock name="clk" num_pins="1"/>

        <!-- Describe fracturable logic element.  
              Each fracturable logic element has a 6-LUT that can alternatively operate as two 5-LUTs with shared inputs. 
              The outputs of the fracturable logic element can be optionally registered
          -->
      <pb_type name="ble" num_pb="8">
        <input name="in" num_pins="8"/>
        <output name="out" num_pins="3"/>
        <clock name="clk" num_pins="1"/>

        <mode name="n1_lut6">      
          <pb_type name="lut_6" blif_model=".names" num_pb="1" class="lut">
            <input name="in" num_pins="6" port_class="lut_in"/>
            <output name="out" num_pins="1" port_class="lut_out"/>
            <delay_matrix type="max" in_port="lut_6.in" out_port="lut_6.out">
              261e-12
              261e-12
              261e-12
              261e-12
              261e-12
              261e-12
            </delay_matrix>
          </pb_type>
          <pb_type name="ff" blif_model=".latch" num_pb="1" class="flipflop">
            <input name="D" num_pins="1" port_class="D"/>
            <output name="Q" num_pins="1" port_class="Q"/>
            <clock name="clk" num_pins="1" port_class="clock"/>
            <T_setup value="66e-12" port="ff.D" clock="clk"/>
            <T_clock_to_Q max="124e-12" port="ff.Q" clock="clk"/>
          </pb_type>
          <interconnect>
            <direct name="direcrs1" input="lut_6.out" output="ff.D"/>
            
            <direct name="direcrs2" input="ble.in[5:0]" output="lut_6.in"/>
            <direct name="direcrs3" input="ble.clk" output="ff.clk"/>
            
            <direct name="direcrs4" input="lut_6.out" output="ble.out[0:0]"/>
            <direct name="direcrs5" input="ff.Q" output="ble.out[1:1]"/>

            <mux name="ix_foo" input="ble.in[6:6] ble.in[7:7]" output="ble.out[2:2]">
              <delay_constant max="25e-12" in_port="ble.in[6:6]" out_port="ble.out[2:2]"/>
              <delay_constant max="45e-12" in_port="ble.in[7:7]" out_port="ble.out[2:2]"/>
            </mux>
            <!--to be completed-->
          </interconnect>
        </mode>
      </pb_type>
      <interconnect>
        <direct name="clbins1" input="plb.Ia" output="ble[0:0].in[5:0]"/>
        <direct name="clbins2" input="plb.Ib" output="ble[1:1].in[5:0]"/>
        <direct name="clbins3" input="plb.Ic" output="ble[2:2].in[5:0]"/>
        <direct name="clbins4" input="plb.Id" output="ble[3:3].in[5:0]"/>
        <direct name="clbins5" input="plb.Ie" output="ble[4:4].in[5:0]"/>
        <direct name="clbins6" input="plb.If" output="ble[5:5].in[5:0]"/>
        <direct name="clbins7" input="plb.Ig" output="ble[6:6].in[5:0]"/>
        <direct name="clbins8" input="plb.Ih" output="ble[7:7].in[5:0]"/>
        
        <direct name="clbins9" input="plb.i" output="ble.in[6:6]"/>
        <direct name="clbins10" input="plb.x" output="ble.in[7:7]"/>
          
        <direct name="clbouts1" input="ble[7:0].out[0:0]" output="plb.o[7:0]"/>
        <direct name="clbouts2" input="ble[7:0].out[1:1]" output="plb.q[7:0]"/>
        <direct name="clbouts3" input="ble[7:0].out[2:2]" output="plb.mux_o[7:0]"/>
        <complete name="clks" input="plb.clk" output="ble[7:0].clk">
        </complete>
      </interconnect>


        <!-- Place this general purpose logic block in any unspecified column -->
    </pb_type>
    
    <!-- Define I/O pads begin -->
    <!-- Capacity is a unique property of I/Os, it is the maximum number of I/Os that can be placed at the same (X,Y) location on the FPGA -->
	  <!-- Not sure of the area of an I/O (varies widely), and it's not relevant to the design of the FPGA core, so we're setting it to 0. -->
    <pb_type name="io">
      <input name="outpad" num_pins="1"/>
      <output name="inpad" num_pins="1"/>
      <clock name="clock" num_pins="1"/>
      <!-- IOs can operate as either inputs or outputs.
	     Delays below come from Ian Kuon. They are small, so they should be interpreted as
	     the delays to and from registers in the I/O (and generally I/Os are registered 
	     today and that is when you timing analyze them.
	     -->

      <mode name="physical" disabled_in_pack="true">
        <pb_type name="iopad" blif_model=".subckt io" num_pb="1">
          <input name="outpad" num_pins="1"/>
          <output name="inpad" num_pins="1"/>
        </pb_type>
        <interconnect>
          <direct name="outpad" input="io.outpad" output="iopad.outpad">
            <delay_constant max="1.394e-11" in_port="io.outpad" out_port="iopad.outpad"/>
          </direct>
          <direct name="inpad" input="iopad.inpad" output="io.inpad">
            <delay_constant max="4.243e-11" in_port="iopad.inpad" out_port="io.inpad"/>
          </direct>
        </interconnect>
      </mode>

      <mode name="inpad">
        <pb_type name="inpad" blif_model=".input" num_pb="1">
          <output name="inpad" num_pins="1"/>
        </pb_type>
        <interconnect>
          <direct name="inpad" input="inpad.inpad" output="io.inpad">
            <delay_constant max="4.243e-11" in_port="inpad.inpad" out_port="io.inpad"/>
          </direct>
        </interconnect>

      </mode>
      <mode name="outpad">
        <pb_type name="outpad" blif_model=".output" num_pb="1">
          <input name="outpad" num_pins="1"/>
        </pb_type>
        <interconnect>
          <direct name="outpad" input="io.outpad" output="outpad.outpad">
            <delay_constant max="1.394e-11" in_port="io.outpad" out_port="outpad.outpad"/>
          </direct>
        </interconnect>
      </mode>
    </pb_type>
    <!-- Define I/O pads ends -->

    <pb_type name="dsp">

      <input name="a" num_pins="93"/>
      <input name="b" num_pins="93"/>
      <output name="out" num_pins="64"/>
	  
      <mode name="mult_93x93">
        <pb_type name="mult_36x36_slice" num_pb="1">
          <input name="A_cfg" num_pins="93"/>
          <input name="B_cfg" num_pins="93"/>
          <output name="OUT_cfg" num_pins="64"/>

          <pb_type name="mult_93x93" blif_model=".subckt multiply" num_pb="1">
            <input name="a" num_pins="93"/>
            <input name="b" num_pins="93"/>
            <output name="out" num_pins="64"/>
            <delay_constant max="1.523e-9" in_port="mult_93x93.a" out_port="mult_93x93.out"/>
            <delay_constant max="1.523e-9" in_port="mult_93x93.b" out_port="mult_93x93.out"/>
          </pb_type>

          <interconnect>
            <direct name="a2a" input="mult_36x36_slice.A_cfg" output="mult_93x93.a">
            </direct>
            <direct name="b2b" input="mult_36x36_slice.B_cfg" output="mult_93x93.b">
            </direct>
            <direct name="out2out" input="mult_93x93.out" output="mult_36x36_slice.OUT_cfg">
            </direct>
          </interconnect>

          <power method="pin-toggle">
            <port name="A_cfg" energy_per_toggle="2.13e-12"/>
            <port name="B_cfg" energy_per_toggle="2.13e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <!-- Stratix IV input delay of 207ps is conservative for this architecture because this architecture does not have an input crossbar in the multiplier. 
		   Subtract 72.5 ps delay, which is already in the connection block input mux, leading
		   to a 134 ps delay.
              -->
          <direct name="a2a" input="dsp.a" output="mult_36x36_slice.A_cfg">
            <delay_constant max="134e-12" in_port="dsp.a" out_port="mult_36x36_slice.A_cfg"/>
          </direct>
          <direct name="b2b" input="dsp.b" output="mult_36x36_slice.B_cfg">
            <delay_constant max="134e-12" in_port="dsp.b" out_port="mult_36x36_slice.B_cfg"/>
          </direct>
          <direct name="out2out" input="mult_36x36_slice.OUT_cfg" output="dsp.out">
            <delay_constant max="1.93e-9" in_port="mult_36x36_slice.OUT_cfg" out_port="dsp.out"/>
          </direct>
        </interconnect>

      </mode>
    </pb_type>
    <!-- Define fracturable multiplier end -->

    <!-- Define fracturable memory begin -->
    <!-- 32 Kb Memory that can operate from 512x64 to 32Kx1 for single-port mode and 1024x32 to 32Kx1 for dual-port mode.  
           Area and delay based off Stratix IV 9K and 144K memories (delay from linear interpolation, Tsu(483 ps, 636 ps) Tco(1084ps, 1969ps)).  
           Input delay = 204ps (from Stratix IV LAB line) - 72ps (this architecture does not lump connection box delay in internal delay)
           Output delay = M4K buffer 50ps

           Area is obtained by appropriately scaling and adjusting the published Stratix III (which is architecturally identical to Stratix IV)
           data from H. Wong, V. Betz and J. Rose, "Comparing FPGA vs. Custom CMOS and the Impact on Processor Microarchitecture", FPGA 2011.
           Linearly interpolating (by bit count) between the M9k and M144k areas to obtain an M32k (our RAM size) point yields a 65 nm area of
           of 0.153 mm^2. Interpolating based on port count between the RAMs would instead yield an area of 0.209 mm^2 for our 32 kB RAM; since 
           bit count accounts for more area than ports for a RAM this size we choose the bit count interpolation; however, since the port interpolation
           is not radically different this also gives us confidence that interpolating based on bits is OK, but slightly underpredicts area.
           Scaling to 40 nm^2 yields .0579 mm^2, and converting to MWTUs at 60 L^2 / MWTU yields 604,000 MWTUs. This includes routing. A Stratix IV
           M9K RAM is one row high and hence has one routing tile (one horizonal and one vertical routing segment area). An M144k RAM has 8 such tiles.
           Linearly interpolating on
           bits to 32 kb yields 2.2 routing tiles incorporated in the area number above. The inter-block routing represents 30% of the area of a logic 
           tile according to D. Lewis et al, "Architectural Enhancements in Stratix V," FPGA 2013. Hence we should subtract 0.3 * 2.2 * 84,375 MWTUs to
           obtain a RAM core area (not including inter-block routing) of 548,000 MWTU areas for our 32 kb RAM in a 40 nm process.
    -->
    <pb_type name="memory">

      <input name="addr1" num_pins="77"/>
      <input name="addr2" num_pins="77"/>
      <input name="data" num_pins="90"/>
      <input name="we1" num_pins="1"/>
      <input name="we2" num_pins="1"/>
      <output name="out" num_pins="90"/>
      <clock name="clk" num_pins="1"/>

      <!-- Specify single port mode first -->
      <mode name="mem_512x64_sp">
        <pb_type name="mem_512x64_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
          <input name="addr" num_pins="9" port_class="address"/>
          <input name="data" num_pins="64" port_class="data_in"/>
          <input name="we" num_pins="1" port_class="write_en"/>
          <output name="out" num_pins="64" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="509e-12" port="mem_512x64_sp.addr" clock="clk"/>
          <T_setup value="509e-12" port="mem_512x64_sp.data" clock="clk"/>
          <T_setup value="509e-12" port="mem_512x64_sp.we" clock="clk"/>
          <T_clock_to_Q max="1.234e-9" port="mem_512x64_sp.out" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="9.0e-12"/>					
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[8:0]" output="mem_512x64_sp.addr">
            <delay_constant max="132e-12" in_port="memory.addr1[8:0]" out_port="mem_512x64_sp.addr"/>
          </direct>
          <direct name="data1" input="memory.data[63:0]" output="mem_512x64_sp.data">
            <delay_constant max="132e-12" in_port="memory.data[63:0]" out_port="mem_512x64_sp.data"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_512x64_sp.we">
            <delay_constant max="132e-12" in_port="memory.we1" out_port="mem_512x64_sp.we"/>
          </direct>
          <direct name="dataout1" input="mem_512x64_sp.out" output="memory.out[63:0]">
            <delay_constant max="40e-12" in_port="mem_512x64_sp.out" out_port="memory.out[63:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_512x64_sp.clk">
          </direct>
        </interconnect>
      </mode>
    </pb_type>
    <!-- Define fracturable memory end -->
  </complexblocklist>
  <power>
    <local_interconnect C_wire="2.5e-10"/>
    <mux_transistor_size mux_transistor_size="3"/>
    <FF_size FF_size="4"/>
    <LUT_transistor_size LUT_transistor_size="4"/> 
  </power>
  <clocks>
    <clock buffer_size="auto" C_wire="2.5e-10"/>
  </clocks>
</architecture>
